LAB 01

#include <iostream>
#include <string>
#include <set>
using namespace std;

int main() {
    string str;
    cout << "Enter a string: ";
    cin >> str;

    cout << "Prefix: ";
    for (size_t i = 1; i <= str.size(); ++i)
        cout << str.substr(0, i) << " ";
    cout << endl;

    cout << "Suffix: ";
    for (size_t i = 0; i < str.size(); ++i)
        cout << str.substr(i) << " ";
    cout << endl;

    cout << "Substring: ";
    set<string> substrings;
    for (size_t i = 0; i < str.size(); ++i)
        for (size_t j = 1; j <= str.size() - i; ++j)
            substrings.insert(str.substr(i, j));
    for (const auto &sub : substrings)
        cout << sub << " ";
    cout << endl;

    return 0;
}


LAB 02

#include <iostream>
#include <string>
#include <unordered_set>
using namespace std;

int main() {
    string str;
    cout << "Enter a string: ";
    cin >> str;

    // Check if the first character is valid
    if (!(isalpha(str[0]) || str[0] == '_')) {
        cout << "Invalid identifier" << endl;
        return 0;
    }

    // Check if all characters are valid
    for (char ch : str) {
        if (!(isalnum(ch) || ch == '_')) {
            cout << "Invalid identifier" << endl;
            return 0;
        }
    }

    // Check if the string is a keyword
    unordered_set<string> keywords = {"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for", "goto", "if", "int", "long", "register", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"};
    if (keywords.count(str)) {
        cout << "Keyword" << endl;
    } else {
        cout << "Valid identifier" << endl;
    }

    return 0;
}


LAB 03

#include <iostream>
#include <string>
using namespace std;

int main() {
    string str;
    cout << "Enter the string: ";
    cin >> str;

    // Check if the string is over {0,1}
    for (char ch : str) {
        if (ch != '0' && ch != '1') {
            cout << "String not accepted.\nPlease enter a string over {0,1}" << endl;
            return 0;
        }
    }

    // DFA to check if the string ends with "11"
    if (str.size() >= 2 && str[str.size() - 2] == '1' && str.back() == '1')
        cout << "String accepted";
    else
        cout << "String not accepted";

    return 0;
}

LAB 04

#include <iostream>
#include <string>
using namespace std;

int main() {
    string str;
    cout << "Enter the string: ";
    cin >> str;

    // Check if the string is over {a,b}
    for (char ch : str) {
        if (ch != 'a' && ch != 'b') {
            cout << "String not accepted.\nPlease enter a string over {a,b}" << endl;
            return 0;
        }
    }

    // DFA to check if the string does not end with "ab"
    if (str.size() < 2 || !(str[str.size() - 2] == 'a' && str.back() == 'b'))
        cout << "String accepted.\n";
    else
        cout << "String not accepted.\n";

    return 0;
}

LAB 05

#include <iostream>
#include <vector>
#include <algorithm>  // Add this header for 'find'

using namespace std;

vector<vector<pair<char, int>>> transitions = {
    {{'0', 0}, {'1', 1}},    // State 0: on '0' stays in 0, on '1' goes to 1
    {{'0', 2}},              // State 1: on '0' goes to state 2
    {{'1', 3}},              // State 2: on '1' goes to state 3 (accepting state)
    {{'0', 3}, {'1', 3}}};   // State 3: stays in state 3 on both '0' and '1'

bool simulate_nfa(const string& input) {
    vector<int> states = {0};  // Initial state is 0
    for (char c : input) {
        vector<int> next_states;
        for (int state : states)
            for (auto& t : transitions[state])
                if (t.first == c) next_states.push_back(t.second);
        if (next_states.empty()) return false;
        states = next_states;
    }
    return find(states.begin(), states.end(), 3) != states.end(); // Accept if state 3 is reached
}

int main() {
    string input;
    cout << "Enter a string: ";
    cin >> input;
    cout << (simulate_nfa(input) ? "String Contains Substring 101" : "String Does not contain Substring 101") << endl;
    return 0;
}

LAB 06

#include <iostream>
#include <vector>
#include <algorithm> // For 'find'

using namespace std;

vector<vector<pair<char, int>>> transitions = {
    {{'1', 1}},     // State 0: on '1' goes to state 1
    {{'0', 2}},     // State 1: on '0' goes to state 2
    {{'0', 2}, {'1', 2}}}; // State 2: on '0' or '1', stays in state 2

bool simulate_nfa(const string& input) {
    vector<int> states = {0};  // Initial state is 0
    for (char c : input) {
        vector<int> next_states;
        for (int state : states)
            for (auto& t : transitions[state])
                if (t.first == c) next_states.push_back(t.second);
        if (next_states.empty()) return false;
        states = next_states;
    }
    return find(states.begin(), states.end(), 2) != states.end(); // Accept if state 2 is reached
}

int main() {
    string input;
    cout << "Enter a string: ";
    cin >> input;
    cout << (simulate_nfa(input) ? "Starts with 10" : "Does not start with 10") << endl;
    return 0;
}


LAB 07

#include <iostream>
using namespace std;

void generateBalancedParentheses(string prefix, int openCount, int closeCount, int n) {
    if (openCount == n && closeCount == n) { cout << prefix << endl; return; }
    if (openCount < n) generateBalancedParentheses(prefix + "(", openCount + 1, closeCount, n);
    if (closeCount < openCount) generateBalancedParentheses(prefix + ")", openCount, closeCount + 1, n);
}

int main() {
    int n;
    cout << "Enter the number of pairs of parentheses: ";
    cin >> n;
    generateBalancedParentheses("", 0, 0, n);
    return 0;
}

LAB 08

#include <iostream>
#include <stack>
using namespace std;

bool isLanguageAccepted(const string& input) {
    stack<char> stack;
    for (char c : input) {
        if (c == 'a') stack.push('a');
        else if (c == 'b') {
            if (stack.empty()) return false;
            stack.pop();
        } else return false;
    }
    return stack.empty();
}

int main() {
    string input;
    cout << "Enter a string: ";
    cin >> input;
    cout << (isLanguageAccepted(input) ? "Accepted" : "Rejected") << ": The string is in the language L = {a^nb^n : n â‰¥ 0}\n";
    return 0;
}

LAB 09

//LAB 9
// TM for L={a^nb^n /n>=1}

#include <iostream>
#include <string>
using namespace std;

enum State {
    START,       // Initial state
    MARK_A,      // Mark 'a' and look for corresponding 'b'
    MOVE_LEFT,   // Move left to find next unmarked 'a'
    FIND_B,      // Find an unmarked 'b'
    RETURN_LEFT, // Return to leftmost position
    CHECK_FINAL, // Check if all symbols are marked
    ACCEPT,
    REJECT
};

class TuringMachine {
private:
    string tape;
    int head;
    State state;

public:
    TuringMachine(string input) : tape(input + 'B'), head(0), state(START) {}

    void transition() {
        while (state != ACCEPT && state != REJECT) {
            char current = tape[head];

            switch (state) {
                case START:
                    // Check if string starts with 'a'
                    if (current == 'a') {
                        state = MARK_A;
                    } else {
                        state = REJECT;
                    }
                    break;

                case MARK_A:
                    if (current == 'a') {
                        tape[head] = 'X';  // Mark the 'a'
                        head++;            // Move right
                        state = FIND_B;    // Look for corresponding 'b'
                    } else if (current == 'X') {
                        head++;            // Skip already marked 'a's
                    } else {
                        state = REJECT;    // No more 'a's found
                    }
                    break;

                case FIND_B:
                    if (current == 'b') {
                        tape[head] = 'Y';  // Mark the 'b'
                        state = RETURN_LEFT;
                    } else if (current == 'a' || current == 'X' || current == 'Y') {
                        head++;            // Keep moving right
                    } else if (current == 'B') {
                        state = REJECT;    // Reached end without finding 'b'
                    } else {
                        state = REJECT;    // Invalid character
                    }
                    break;

                case RETURN_LEFT:
                    if (head > 0) {
                        head--;           // Move left
                    } else {
                        state = CHECK_FINAL;
                    }
                    break;

                case CHECK_FINAL:
                    // Check if there are any unmarked symbols
                    bool allMarked = true;
                    bool hasUnmarkedA = false;
                    bool hasUnmarkedB = false;

                    for (char c : tape) {
                        if (c == 'a') hasUnmarkedA = true;
                        if (c == 'b') hasUnmarkedB = true;
                        if (c == 'a' || c == 'b') allMarked = false;
                    }

                    if (allMarked) {
                        // If all symbols are marked, check if the string is non-empty
                        state = (tape.find('X') != string::npos) ? ACCEPT : REJECT;
                    } else if (hasUnmarkedA) {
                        // If there are unmarked 'a's, continue processing
                        head = 0;
                        state = MARK_A;
                    } else {
                        // If there are only unmarked 'b's remaining, reject
                        state = REJECT;
                    }
                    break;
            }
        }
    }

    void printResult() {
        cout << (state == ACCEPT ? "String accepted." : "String rejected.") << endl;
        cout << "Final tape: " << tape << endl;
    }
};

int main() {
    cout << "<< Turing Machine for Language L = {a^n b^n | n >= 1} >>\n\n";
    string input;
    cout << "Enter input string: ";
    cin >> input;

    TuringMachine tm(input);
    tm.transition();
    tm.printResult();

    return 0;
}
